{"version":3,"sources":["ui/index.js","components/Score.js","components/QuestionTitle.js","components/ProgressBar.js","components/QuestionBody.js","components/Navigator.js","App.js","serviceWorker.js","index.js"],"names":["Div","styled","div","marginTop","css","marginRight","marginBottom","marginLeft","FlexDiv","column","justify","align","Score","totalLength","currentQuestionIndex","QuestionTitle","category","ProgressBar","props","className","role","style","width","progress","aria-valuenow","aria-valuemin","aria-valuemax","QuestionBody","handleChooseAnswer","i","userAnswer","onSelectAnswer","Wrapper","this","allQuetions","index","question","answers","map","answer","key","type","onClick","disabled","didUserChoosed","Component","Navigator","onClickBack","onClickNext","App","state","allQuestions","choosenAnswer","handleNextButton","length","setState","handleBackButton","userChooseQuestion","axios","get","then","res","data","results","catch","err","console","log","currentQuestion","WrapperBlock","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b1749a2.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nexport const Div = styled.div`\r\n    ${({ marginTop }) =>\r\n      marginTop &&\r\n      css`\r\n        margin-top: ${marginTop};\r\n      `}\r\n    ${({ marginRight }) =>\r\n      marginRight &&\r\n      css`\r\n        margin-right: ${marginRight};\r\n      `}\r\n    ${({ marginBottom }) =>\r\n      marginBottom &&\r\n      css`\r\n        margin-bottom: ${marginBottom};\r\n      `}\r\n    ${({ marginLeft }) =>\r\n      marginLeft &&\r\n      css`\r\n        margin-left: ${marginLeft};\r\n      `}\r\n`;\r\n\r\nexport const FlexDiv = styled(Div)`\r\n  display:flex;\r\n  ${({ column }) =>\r\n    column &&\r\n    css`\r\n      flex-direction: ${column};\r\n    `}\r\n  ${({ justify }) =>\r\n    justify &&\r\n    css`\r\n      justify-content: ${justify};\r\n    `}\r\n  ${({ align }) =>\r\n    align &&\r\n    css`\r\n      align-items: ${align};\r\n    `}\r\n`;\r\n","import React from \"react\";\r\n\r\nconst Score = ({ totalLength, currentQuestionIndex }) => {\r\n  return (\r\n    <p>\r\n      {currentQuestionIndex + 1}/{totalLength}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport { FlexDiv } from \"../ui\";\r\n\r\nimport Score from \"./Score\";\r\n\r\nconst QuestionTitle = ({ category, totalLength, currentQuestionIndex }) => {\r\n  return (\r\n    <FlexDiv justify=\"space-around\">\r\n      <p> {category.category}</p>\r\n      <Score\r\n        totalLength={totalLength}\r\n        currentQuestionIndex={currentQuestionIndex}\r\n      />\r\n    </FlexDiv>\r\n  );\r\n};\r\n\r\nexport default QuestionTitle;\r\n","import React from \"react\";\r\nimport { Div } from \"../ui\";\r\n\r\nconst ProgressBar = props => {\r\n  return (\r\n    <Div marginTop=\"10px\">\r\n      <div className=\"progress\">\r\n        <div\r\n          className=\"progress-bar\"\r\n          role=\"progressbar\"\r\n          style={{ width: `${props.progress}%` }}\r\n          aria-valuenow={props.progress}\r\n          aria-valuemin=\"0\"\r\n          aria-valuemax=\"100\"\r\n        >\r\n          {props.progress}%\r\n        </div>\r\n      </div>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { FlexDiv } from \"../ui\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default class QuestionBody extends Component {\r\n  handleChooseAnswer = i => {\r\n    const userAnswer = i;\r\n    this.props.onSelectAnswer(userAnswer);\r\n  };\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <FlexDiv column=\"column\" marginTop=\"3rem\">\r\n          {this.props.allQuetions[this.props.index].question}\r\n        </FlexDiv>\r\n        <FlexDiv marginTop=\"5rem\" justify=\"center\">\r\n          {this.props.allQuetions[this.props.index].answers.map((answer, i) => (\r\n            <button\r\n              key={answer}\r\n              type=\"button\"\r\n              className=\"btn btn-primary mr-3\"\r\n              onClick={() => this.handleChooseAnswer(i)}\r\n              disabled={this.props.didUserChoosed}\r\n            >\r\n              {answer}\r\n            </button>\r\n          ))}\r\n        </FlexDiv>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  height: 20rem;\r\n`;\r\n","import React from \"react\";\r\nimport { FlexDiv } from \"../ui\";\r\n\r\nconst Navigator = props => {\r\n  function clickNext() {\r\n    props.onClickNext();\r\n  }\r\n  function clickBack() {\r\n    props.onClickBack();\r\n  }\r\n  return (\r\n    <FlexDiv justify=\"flex-end\">\r\n      <button type=\"button\" className=\"btn btn-info mr-3\" onClick={clickBack}>\r\n        BACK\r\n      </button>\r\n      <button type=\"button\" className=\"btn btn-info\" onClick={clickNext}>\r\n        NEXT\r\n      </button>\r\n    </FlexDiv>\r\n  );\r\n};\r\n\r\nexport default Navigator;\r\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { FlexDiv } from \"./ui\";\n\nimport axios from \"axios\";\nimport \"./App.css\";\n\nimport QuestionTitle from \"./components/QuestionTitle\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport QuestionBody from \"./components/QuestionBody\";\nimport Navigator from \"./components/Navigator\";\n\nclass App extends Component {\n  state = {\n    allQuestions: [],\n    choosenAnswer: null,\n    currentQuestionIndex: 0,\n    progress: 20\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"db.json\")\n      .then(res => {\n        this.setState({\n          allQuestions: res.data.results\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  handleNextButton = () => {\n    if (\n      this.state.currentQuestionIndex ===\n      this.state.allQuestions.length - 1\n    ) {\n      this.setState({\n        currentQuestionIndex: 0,\n        choosenAnswer: null,\n        progress: 20\n      });\n      return;\n    }\n\n    this.setState({\n      currentQuestionIndex: this.state.currentQuestionIndex + 1,\n      choosenAnswer: null,\n      progress: this.state.progress + 20\n    });\n  };\n\n  handleBackButton = () => {\n    if (this.state.currentQuestionIndex === 0) {\n      this.setState({\n        currentQuestionIndex: 0,\n        choosenAnswer: null\n      });\n      return;\n    }\n\n    this.setState({\n      currentQuestionIndex: this.state.currentQuestionIndex - 1,\n      choosenAnswer: null,\n      progress: this.state.progress - 20\n    });\n  };\n  userChooseQuestion = userAnswer => {\n    this.setState({\n      choosenAnswer: userAnswer\n    });\n  };\n\n  render() {\n    const totalLength = this.state.allQuestions.length;\n    const currentQuestion = this.state.allQuestions[\n      this.state.currentQuestionIndex\n    ];\n    const index = this.state.currentQuestionIndex;\n\n    if (!currentQuestion) {\n      return null;\n    }\n\n    return (\n      <>\n        <div className=\"container\">\n          <WrapperBlock column=\"column\">\n            <QuestionTitle\n              category={currentQuestion}\n              totalLength={totalLength}\n              currentQuestionIndex={this.state.currentQuestionIndex}\n            />\n            <ProgressBar progress={this.state.progress} />\n            <QuestionBody\n              onSelectAnswer={this.userChooseQuestion}\n              index={index}\n              allQuetions={this.state.allQuestions}\n              didUserChoosed={this.state.choosenAnswer}\n            />\n            <Navigator\n              onClickNext={this.handleNextButton}\n              onClickBack={this.handleBackButton}\n            />\n          </WrapperBlock>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n\nconst WrapperBlock = styled(FlexDiv)`\n  background-color: #ffffff;\n  padding: 3rem;\n  text-align: left;\n  color: #444444;\n  min-width: 1000px;\n  min-height: 600px;\n`;\n\n// ===========================================================\n// const App = () => {\n//   const [all, setAll] = useState([]);\n//   const [category, setCategory] = useState(\"\");\n//   const [question, setQuestion] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [indexOfQuestion, setIndexOfQuestion] = useState();\n\n//   useEffect(() => {\n//     axios\n//       .get(\"db.json\")\n//       .then(res => {\n//         setAll(res.data.results);\n//         setCategory(res.data.results[0].category);\n//         setQuestion(res.data.results[0].question);\n//         setAnswers(\n//           res.data.results[0].incorrect_answers.concat(\n//             res.data.results[0].correct_answer\n//           )\n//         );\n//         setIndexOfQuestion(question.indexOf());\n//       })\n//       .catch(err => console.log(err));\n//   }, []);\n\n//   const nextQuestion = index => {\n//     return index++;\n//   };\n\n//\n// };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}